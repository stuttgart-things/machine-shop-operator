namespace: machine-shop-operator-system
# secrets:
#   vault:
#     name: vault
#     labels:
#       app.kubernetes.io/component: manager
#       app.kubernetes.io/created-by: machine-shop-operator
#       app.kubernetes.io/instance: controller-manager
#       app.kubernetes.io/part-of: machine-shop-operator
#     dataType: stringData
#     secretKVs:
#       VAULT_TOKEN: <path:apps/data/vault#token>
#       VAULT_NAMESPACE: <path:apps/data/vault#namespace>
#       VAULT_ADDR: <path:apps/data/vault#addr>
configmaps:
  terraform-templates:
    vsphere-vm: |
      module "{{`{{ .moduleName }}`}}" {
        vm_count = var.vm_count
        vsphere_vm_name = var.vsphere_vm_name
        vm_num_cpus = var.vm_num_cpus
        vm_memory = var.vm_memory
        vm_disk_size = var.vm_disk_size
        firmware = var.firmware
        vsphere_vm_folder_path = var.vsphere_vm_folder_path
        vsphere_datacenter = var.vsphere_datacenter
        vsphere_datastore = var.vsphere_datastore
        vsphere_resource_pool = var.vsphere_resource_pool
        vsphere_network = var.vsphere_network
        vsphere_vm_template = var.vsphere_vm_template
        vm_ssh_user = var.vm_ssh_user
        vm_ssh_password = var.vm_ssh_password
        bootstrap = var.bootstrap
        source = "{{`{{ .moduleSourceUrl }}`}}"
        annotation = var.annotation
      }

      terraform {
        backend "s3" {
          endpoint = "{{`{{ .backendEndpoint }}`}}"
          key = "{{`{{ .backendKey }}`}}"
          region = "{{`{{ .backendRegion }}`}}"
          bucket = "{{`{{ .backendBucket }}`}}"
          skip_credentials_validation = true
          skip_metadata_api_check = true
          skip_region_validation = true
          force_path_style = true
        }

        required_providers {
          {{`{{ .tfProviderName }}`}} = {
            source = "{{`{{ .tfProviderSource }}`}}"
            version = ">= {{`{{ .tfProviderVersion }}`}}"
          }
        }

        required_version = ">= {{`{{ .tfVersion }}`}}"
      }

      provider "vsphere" {
        user                 = var.vsphere_user
        password             = var.vsphere_password
        vsphere_server       = var.vsphere_server
        allow_unverified_ssl = true
      }

      variable "vm_disk_size" {
        default     = "128"
        description = "disk size"
      }

      variable "vsphere_vm_name" {
        default = false
        description = "name of to be created vm"
      }

      variable "annotation" {
        default     = "VSPHERE-VM BUILD w/ machine-shop-operator FOR STUTTGART-THINGS"
        description = "vcenter annotation/note"
      }

      variable "bootstrap" {
        default     = ["echo STUTTGART-THINGS"]
        description = "possibility to define bootstrap commands"
      }

      variable "firmware" {
        default     = "bios"
        description = "firmware"
      }

      variable "vm_count" {
        default     = 1
        description = "count of to be build vms"
      }

      variable "vm_num_cpus" {
        default     = 8
        description = "count of cpu cores"
      }

      variable "vm_memory" {
        default     = 8192
        description = "count of ram in mb"
      }

      variable "vsphere_server" {
        default     = false
        description = "vsphere server"
      }

      variable "vsphere_user" {
        default     = false
        description = "password of vsphere user"
      }

      variable "vsphere_password" {
        default     = false
        description = "password of vsphere user"
      }

      variable "vm_ssh_user" {
        default     = false
        description = "username of ssh user for vm"
      }

      variable "vm_ssh_password" {
        default     = false
        description = "password of ssh user for vm"
      }

      variable "vsphere_datastore" {
        default     = false
        description = "name of vsphere datastore"
      }

      variable "vsphere_datacenter" {
        default     = false
        description = "name of vsphere datacenter"
      }

      variable "vsphere_resource_pool" {
        default     = false
        description = "name of vsphere resource pool"
      }

      variable "vsphere_network" {
        default     = false
        description = "name of vsphere network"
      }

      variable "vsphere_vm_template" {
        default     = false
        description = "name/path of vsphere vm template"
      }

      variable "vsphere_vm_folder_path" {
        default     = false
        description = "folder path of to be created vm on datacenter"
      }

      output "{{`{{ .moduleName }}`}}_ip" {
        value = module.{{`{{ .moduleName }}`}}.ip
      }
    pve-vm: |
      module "{{`{{ .moduleName }}`}}" {
        vm_count = var.vm_count
        vm_name = var.vm_name
        vm_num_cpus = var.vm_num_cpus
        vm_memory = var.vm_memory
        vm_disk_size = var.vm_disk_size
        vm_template = var.vm_template
        pve_cluster_node = var.pve_cluster_node
        pve_datastore = var.pve_datastore
        pve_folder_path = var.pve_folder_path
        pve_network = var.pve_network
        vm_ssh_user = var.vm_ssh_user
        vm_ssh_password = var.vm_ssh_password
        source = "{{`{{ .moduleSourceUrl }}`}}"
        vm_notes = "PVE-VM BUILD w/ machine-shop-operator FOR STUTTGART-THINGS"
      }

      terraform {
        backend "s3" {
          endpoint = "{{`{{ .backendEndpoint }}`}}"
          key = "{{`{{ .backendKey }}`}}"
          region = "{{`{{ .backendRegion }}`}}"
          bucket = "{{`{{ .backendBucket }}`}}"
          skip_credentials_validation = true
          skip_metadata_api_check = true
          skip_region_validation = true
          force_path_style = true
        }

        required_providers {
          {{`{{ .tfProviderName }}`}} = {
            source = "{{`{{ .tfProviderSource }}`}}"
            version = ">= {{`{{ .tfProviderVersion }}`}}"
          }
        }

        required_version = ">= {{`{{ .tfVersion }}`}}"
      }

      provider "proxmox" {
          pm_api_url      = var.pve_api_url
          pm_user         = var.pve_api_user
          pm_password     = var.pve_api_password
          pm_tls_insecure = var.pve_api_tls_verify
          pm_parallel     = 3
      }

      variable "vm_count" {
        default     = 1
        description = "count of to be build vms"
      }

      variable "vm_name" {
        default = false
        description = "name of to be created vm"
      }

      variable "vm_num_cpus" {
        default     = 8
        description = "count of cpu cores"
      }

      variable "vm_disk_size" {
        default     = "128G"
        description = "disk size"
      }

      variable "vm_template" {
        default     = false
        description = "name/path of vm template"
      }

      variable "vm_memory" {
        default     = 8192
        description = "count of ram in mb"
      }

      variable "pve_api_url" {
        default     = false
        description = "url of proxmox api"
      }

      variable "pve_api_user" {
        default     = false
        description = "username of proxmox api user"
      }

      variable "pve_api_password" {
        default     = false
        description = "password of proxmox api user"
      }

      variable "pve_api_tls_verify" {
        default     = true
        description = "proxmox API disable check if cert is valid"
      }

      variable "vm_ssh_user" {
        default         = ""
        description     = "Username of VM"
      }

      variable "vm_ssh_password" {
        default         = ""
        description     = "Password of VM user"
      }

      variable "pve_cluster_node"{
        default         = false
        description     = "Cluster node"
      }

      variable "pve_datastore"{
        default         = false
        description     = "Datastore for the PVE"
      }

      variable "pve_folder_path"{
        default         = false
        description     = "Folder path for the PVE"
      }

      variable "pve_network"{
        default         = false
        description     = "Network for the pve"
      }

      output "{{`{{ .moduleName }}`}}_ip" {
        value = module.{{`{{ .moduleName }}`}}.ip
      }
deployment:
  name: machine-shop-operator-controller-manager
  volumes:
    terraform-templates:
      volumeKind: configMap
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                  - amd64
                  - arm64
                  - ppc64le
                  - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux
  containers:
    manager:
      volumeMounts:
        terraform-templates:
          mountPath: /terraform/
          volumeKind: emptyDir
      image: eu.gcr.io/stuttgart-things/machine-shop-operator
      tag: '23.0611.1012-v0.1.23-TF-OUTPUT-LOG'
      imagePullPolicy: Always
      env:
        ANSIBLE_GATHERING:
          value: explicit
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
      args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
      probes:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
      resources:
        requests:
          cpu: 10m
          memory: 64Mi
        limits:
          cpu: 500m
          memory: 128Mi
    kube-rbac-proxy:
      image: gcr.io/kubebuilder/kube-rbac-proxy
      tag: v0.13.1
      args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
      imagePullPolicy: Always
      securityContext:
        capabilities:
          drop:
            - ALL
        allowPrivilegeEscalation: false
        privileged: false
        runAsNonRoot: true
        readOnlyRootFilesystem: true
        # runAsGroup: 1000
        # runAsUser: 1000
        # fsGroup: 2000
      ports:
        https:
          containerPort: 8443
          protocol: TCP
      resources:
        requests:
          cpu: 5m
          memory: 64Mi
        limits:
          cpu: 500m
          memory: 128Mi
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: machine-shop-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: machine-shop-operator
    control-plane: controller-manager
  selectorLabels:
    control-plane: controller-manager
  replicaCount: 1
  terminationGracePeriodSeconds: 10
  serviceAccount: machine-shop-operator-controller-manager
  securityContext:
    runAsNonRoot: true
services:
  machine-shop-operator-controller-manager-metrics-service:
    labels:
      app.kubernetes.io/component: kube-rbac-proxy
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: controller-manager-metrics-service
      app.kubernetes.io/name: service
      app.kubernetes.io/part-of: machine-shop-operator
      control-plane: controller-manager
    ports:
      - name: https
        protocol: TCP
        value: https
        expose:
          service:
            type: ClusterIP
            port: 8443
    selectorLabels:
      control-plane: controller-manager
namespaces:
  machine-shop-operator-system:
    name: machine-shop-operator-system
    labels:
      app.kubernetes.io/component: manager
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: system
      app.kubernetes.io/name: namespace
      app.kubernetes.io/part-of: machine-shop-operator
      control-plane: controller-manager
# RBAC
serviceAccounts:
  machine-shop-operator-controller-manager:
    labels:
      app.kubernetes.io/component: rbac
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: controller-manager
      app.kubernetes.io/name: serviceaccount
      app.kubernetes.io/part-of: machine-shop-operator
roles:
  machine-shop-operator-leader-election-role:
    labels:
      app.kubernetes.io/component: rbac
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: leader-election-role
      app.kubernetes.io/name: role
      app.kubernetes.io/part-of: machine-shop-operator
    rules:
      - apiGroups:
          - "batch"
        resources:
          - jobs
        verbs:
          - get
          - list
          - watch
          - create
      - apiGroups:
          - ""
        resources:
          - configmaps
        verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
      - apiGroups:
          - coordination.k8s.io
        resources:
          - leases
        verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - create
          - patch
roleBindings:
  machine-shop-operator-leader-election-rolebinding:
    labels:
      app.kubernetes.io/component: rbac
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: leader-election-rolebinding
      app.kubernetes.io/name: rolebinding
      app.kubernetes.io/part-of: machine-shop-operator
    roleRef:
      kind: Role
      name: machine-shop-operator-leader-election-role
      apiGroup: rbac.authorization.k8s.io
    subjects:
      - kind: ServiceAccount
        name: machine-shop-operator-controller-manager
        namespace: machine-shop-operator-system
clusterRoles:
  machine-shop-operator-manager-role:
    labels:
      app.kubernetes.io/component: kube-rbac-proxy
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: metrics-reader
      app.kubernetes.io/name: clusterrole
      app.kubernetes.io/part-of: machine-shop-operator
    rules:
      - apiGroups:
          - machineshop.sthings.tiab.ssc.sva.de
        resources:
          - ansibles
        verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - "batch"
        resources:
          - jobs
        verbs:
          - get
          - list
          - patch
          - watch
          - create
      - apiGroups:
          - machineshop.sthings.tiab.ssc.sva.de
        resources:
          - ansibles/finalizers
        verbs:
          - update
      - apiGroups:
          - machineshop.sthings.tiab.ssc.sva.de
        resources:
          - ansibles/status
        verbs:
          - get
          - patch
          - update
      - apiGroups:
          - machineshop.sthings.tiab.ssc.sva.de
        resources:
          - terraforms
        verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - machineshop.sthings.tiab.ssc.sva.de
        resources:
          - terraforms/finalizers
        verbs:
          - update
      - apiGroups:
          - machineshop.sthings.tiab.ssc.sva.de
        resources:
          - terraforms/status
        verbs:
          - get
          - patch
          - update
  machine-shop-operator-metrics-reader:
    labels:
      app.kubernetes.io/component: kube-rbac-proxy
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: metrics-reader
      app.kubernetes.io/name: clusterrole
      app.kubernetes.io/part-of: machine-shop-operator
    rules:
      - nonResourceURLs:
          - /metrics
        verbs:
          - get
  machine-shop-operator-proxy-role:
    labels:
      app.kubernetes.io/component: kube-rbac-proxy
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: metrics-reader
      app.kubernetes.io/name: clusterrole
      app.kubernetes.io/part-of: machine-shop-operator
    rules:
      - apiGroups:
          - authentication.k8s.io
        resources:
          - tokenreviews
        verbs:
          - create
      - apiGroups:
          - authorization.k8s.io
        resources:
          - subjectaccessreviews
        verbs:
          - create
clusterRoleBindings:
  machine-shop-operator-manager-rolebinding:
    labels:
      app.kubernetes.io/component: kube-rbac-proxy
      app.kubernetes.io/created-by: machine-shop-operator
      app.kubernetes.io/instance: proxy-rolebinding
      app.kubernetes.io/name: clusterrolebinding
      app.kubernetes.io/part-of: machine-shop-operator
    roleRef:
      kind: ClusterRole
      name: machine-shop-operator-manager-role
      apiGroup: rbac.authorization.k8s.io
    subjects:
      - kind: ServiceAccount
        name: machine-shop-operator-controller-manager
        namespace: machine-shop-operator-system
