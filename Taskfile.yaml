---
version: 3
vars:
  REGISTRY: eu.gcr.io
  REPOSITORY_NAME: stuttgart-things
  MODULE: github.com/{{ .REPOSITORY_NAME }}/{{ .PROJECT_NAME }}
  CONTAINER_RUNTIME_CMD: sudo nerdctl
  CONTROLLER_GEN_CMD: "./bin/controller-gen"
  KUSTOMIZE_CMD: /usr/bin/kustomize
  PROJECT_NAME:
    sh: pwd | grep -o "[^/]*$"
  MAJOR:
    sh: git describe --tags --abbrev=0 | cut -d "." -f1
  MINOR:
    sh: git describe --tags --abbrev=0 | cut -d "." -f2
  PATCH:
    sh: git describe --tags --abbrev=0 | cut -d "." -f3 |  cut -d "-" -f1
  VERSION:
    sh: git describe --tags --abbrev=0
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  DATE:
    sh: date +"%y.%m%d.%H%M"
  UPDATED_TAG:
    sh: old_tag=$(git describe --tags --abbrev=0 | cut -d "." -f3 | cut -d "-" -f1); new_tag=$((old_tag+1)); echo $new_tag
  UPDATED_TAG_VERSION:
    sh: t1=$(git describe --tags --abbrev=0 | cut -f1 -d'.'); t2=$(git describe --tags --abbrev=0 | cut -f2 -d'.'); echo $t1.$t2.{{ .UPDATED_TAG }}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo -$(git rev-parse --abbrev-ref HEAD) ; fi

tasks:
  install-kustomize:
    desc: Download + install-kustomize
    cmds:
      - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | sudo bash

  lint:
    desc: Lint code
    cmds:
      - cmd: golangci-lint run
        ignore_error: true

  # build-creator-image:
  #   desc: Run informer container
  #   cmds:
  #     - '{{ .CONTAINER_RUNTIME_CMD }} build -t {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/mso-resource-creator:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }} --build-arg VERSION={{ .UPDATED_TAG_VERSION }} --build-arg BUILD_DATE={{ .DATE }} --build-arg COMMIT={{ .GIT_COMMIT }} ./resource-creator'
  #     - "{{ .CONTAINER_RUNTIME_CMD }} push {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/mso-resource-creator:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}"

  # run-creator-container:
  #   desc: Run creator container
  #   deps: [build-creator-image]
  #   cmds:
  #     - '{{ .CONTAINER_RUNTIME_CMD }}  run -v /home/sthings/.kube/dev11:/home/nonroot/.kube/config -e "KUBECONFIG=/home/nonroot/.kube/config" -e "REDIS_SERVER={{ .REDIS_SERVER }}" -e "REDIS_PORT={{ .REDIS_PORT }}" -e "REDIS_PASSWORD={{ .REDIS_PASSWORD }}" {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/mso-resource-creator:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}'
  #   env:
  #     REDIS_SERVER: redis-pve.labul.sva.de
  #     REDIS_PORT: 6379
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}

  # build-informer-image:
  #   desc: Run informer container
  #   cmds:
  #     - '{{ .CONTAINER_RUNTIME_CMD }} build -t {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/mso-informer:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }} --build-arg VERSION={{ .UPDATED_TAG_VERSION }} --build-arg BUILD_DATE={{ .DATE }} --build-arg COMMIT={{ .GIT_COMMIT }} ./informer'
  #     - "{{ .CONTAINER_RUNTIME_CMD }} push {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/mso-informer:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}"

  # run-informer-container:
  #   desc: Run informer container
  #   deps: [build-informer-image]
  #   cmds:
  #     - '{{ .CONTAINER_RUNTIME_CMD }} run -v /home/sthings/.kube/dev11:{{ .KUBECONFIG }} -e "KUBECONFIG={{ .KUBECONFIG }}" -e "REDIS_SERVER={{ .REDIS_SERVER }}" -e "REDIS_PORT={{ .REDIS_PORT }}" -e "REDIS_PASSWORD={{ .REDIS_PASSWORD }}" {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/mso-informer:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}'
  #   env:
  #     KUBECONFIG: /tmp/kubeconfig
  #     REDIS_SERVER: redis-pve.labul.sva.de
  #     REDIS_PORT: 6379
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}

  test:
    desc: Test code
    cmds:
      - go mod tidy
      - go test -v

  crds:
    desc: Generate crds
    deps: [lint, test]
    cmds:
      - '{{ .CONTROLLER_GEN_CMD }} rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases'
      - '{{ .CONTROLLER_GEN_CMD }} rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=helm/{{ .PROJECT_NAME }}/crds'

  tag:
    desc: commit, push & tag the module
    deps: [lint]
    cmds:
      - go mod tidy
      - git pull
      - git add *
      - git config advice.addIgnoredFile false
      - git commit -am 'updated {{ .PROJECT_NAME }} {{ .DATE }} for tag version {{ .UPDATED_TAG_VERSION }}{{ .BRANCH }} '
      - git push
      - git tag -a {{ .UPDATED_TAG_VERSION }}{{ .BRANCH }} -m 'updated for stuttgart-things {{ .DATE }} for tag version {{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}'
      - git push origin --tags

  build-image:
    desc: Build image
    deps: [tag, crds]
    cmds:
      - "{{ .CONTAINER_RUNTIME_CMD }} build -t {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/{{ .PROJECT_NAME }}:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }} ."
      - "{{ .CONTAINER_RUNTIME_CMD }} push {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/{{ .PROJECT_NAME }}:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}"
      - cd config/manager && {{ .KUSTOMIZE_CMD }} edit set image controller={{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/{{ .PROJECT_NAME }}:{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}

  deploy-crds:
    desc: Generate and deploy crds
    deps: [crds]
    cmds:
      - '{{ .KUSTOMIZE_CMD }} build config/crd > /tmp/{{ .PROJECT_NAME }}-crds.yaml'
      - kubectl get nodes
      - sleep 5
      - kubectl apply -f /tmp/{{ .PROJECT_NAME }}-crds.yaml
      - kubectl get crds

  deploy:
    desc: Build image & deploy
    deps: [deploy-crds, build-image]
    cmds:
      - '{{ .KUSTOMIZE_CMD }} build config/default > /tmp/{{ .PROJECT_NAME }}-deployment.yaml'
      - kubectl get nodes
      - sleep 5
      - envsubst < config/addons/secret.yaml | kubectl apply -f -
      - kubectl apply -f config/addons/template.yaml
      - kubectl apply -f /tmp/{{ .PROJECT_NAME }}-deployment.yaml
      - sleep 5
      - kubectl -n shipyard-operator-system logs -f $(kubectl get pods -o name -n shipyard-operator-system)
    env:
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_NAMESPACE: ${VAULT_NAMESPACE}
      VAULT_ADDR: ${VAULT_ADDR}

  package:
    desc: Update Chart.yaml and package archive
    cmds:
      - git add ./helm/*/*
      - yq e -i '.version = "{{ .UPDATED_TAG_VERSION }}"' ./helm/*/Chart.yaml
      - "sed -i 's/appVersion: .*/appVersion: {{ .UPDATED_TAG_VERSION }} /g' ./helm/*/Chart.yaml"
      - yq e -i '.deployment.containers.manager.tag = "{{ .DATE }}-{{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}"' ./helm/*/values.yaml
      - helm package ./helm/*/

  push:
    desc: Push to registry
    deps: [build-image, package]
    cmds:
      - helm push {{ .PROJECT_NAME }}-{{ .UPDATED_TAG_VERSION }}.tgz oci://{{ .REGISTRY }}/{{ .REPOSITORY_NAME }}
      - yq e -i '.spec.source.targetRevision = "{{ .UPDATED_TAG_VERSION }}"' argocd/deployment.yaml
      - rm -rf {{ .PROJECT_NAME }}-{{ .UPDATED_TAG_VERSION }}.tgz
      - git commit -am 'updated helm chart and argocd deployment for version {{ .UPDATED_TAG_VERSION }}{{ .BRANCH }} '
      - git push
    vars:
      PACKAGE:
        sh: "ls *tgz* -Art | tail -n 1"
